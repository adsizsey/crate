import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import ks_2samp, spearmanr
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_auc_score, roc_curve

# Load Data
df = pd.read_csv("credit_data_2023.csv")

# Rename columns for clarity
df = df.rename(columns={
    "Vintage": "Vintage",
    "dpd60plus_in_12_chg_bk": "Default",
    "ACQ_FICO": "FICO",
    "VANTAGE3_SCORE": "Vantage"
})

# Data Cleaning
df["Default"] = df["Default"].astype(int)
df["Vintage"] = pd.to_datetime(df["Vintage"], format="%Y_%m", errors="coerce")
df.dropna(subset=["FICO", "Vantage", "Default", "Vintage"], inplace=True)

# ‚úÖ **Invert Scores for Proper Risk Ordering**
df["FICO_Risk"] = -df["FICO"]
df["Vantage_Risk"] = -df["Vantage"]

### **1Ô∏è‚É£ AUC-ROC & Gini Coefficient for Risk Ranking**
def compute_auc_roc(score_col):
    fpr, tpr, _ = roc_curve(df["Default"], df[score_col])
    return roc_auc_score(df["Default"], df[score_col]), fpr, tpr

def gini(y_true, y_scores):
    """Compute Gini coefficient for risk ranking quality"""
    return 2 * roc_auc_score(y_true, y_scores) - 1

auc_roc_fico, fpr_fico, tpr_fico = compute_auc_roc("FICO_Risk")
auc_roc_vantage, fpr_vantage, tpr_vantage = compute_auc_roc("Vantage_Risk")

gini_fico = gini(df["Default"], df["FICO"])
gini_vantage = gini(df["Default"], df["Vantage"])

# ‚úÖ **Plot ROC Curve**
plt.figure(figsize=(10, 5))
plt.plot(fpr_fico, tpr_fico, label=f"FICO (AUC-ROC = {auc_roc_fico:.3f})")
plt.plot(fpr_vantage, tpr_vantage, label=f"Vantage (AUC-ROC = {auc_roc_vantage:.3f})")
plt.plot([0, 1], [0, 1], linestyle="--", color="gray")  # Random guess line
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve: FICO vs. Vantage 3.0")
plt.legend()
plt.grid()
plt.show()

### **2Ô∏è‚É£ KS Test for Risk Segmentation**
def compute_ks(score_col):
    good = df[df["Default"] == 0][score_col]
    bad = df[df["Default"] == 1][score_col]
    return ks_2samp(good, bad)[0]

ks_fico, ks_vantage = compute_ks("FICO_Risk"), compute_ks("Vantage_Risk")

### **3Ô∏è‚É£ Default Rate by Score Buckets**
fico_bins = [300, 580, 620, 660, 700, 750, 800, 850]
df["FICO_Bucket"] = pd.cut(df["FICO"], bins=fico_bins, labels=fico_bins[:-1])

vantage_bins = [300, 600, 650, 700, 750, 800, 850]
df["Vantage_Bucket"] = pd.cut(df["Vantage"], bins=vantage_bins, labels=vantage_bins[:-1])

fico_default_rates = df.groupby("FICO_Bucket")["Default"].mean()
vantage_default_rates = df.groupby("Vantage_Bucket")["Default"].mean()

# ‚úÖ **Plot Default Rate by Score Buckets**
plt.figure(figsize=(10, 5))
plt.plot(fico_default_rates, marker="o", label="FICO", color="blue")
plt.plot(vantage_default_rates, marker="s", label="Vantage 3.0", color="red")
plt.xlabel("Score Buckets")
plt.ylabel("Default Rate")
plt.title("Risk Slope: Default Rate by Score Buckets")
plt.legend()
plt.grid()
plt.show()

### **4Ô∏è‚É£ Vintage-Based Default Rate Trends**
vintage_defaults = df.groupby(df["Vintage"].dt.to_period("M"))["Default"].mean().reset_index()

plt.figure(figsize=(10, 5))
sns.lineplot(x="Vintage", y="Default", data=vintage_defaults, marker="o")
plt.xticks(rotation=45)
plt.xlabel("Vintage")
plt.ylabel("Default Rate")
plt.title("Default Rate by Vintage")
plt.grid()
plt.show()

### **5Ô∏è‚É£ Score Distribution Shifts Over Time**
fico_distribution = df.groupby(["Vintage", "FICO_Bucket"]).size().unstack()
vantage_distribution = df.groupby(["Vintage", "Vantage_Bucket"]).size().unstack()

plt.figure(figsize=(12, 6))
fico_distribution.plot(kind="line", marker="o", colormap="coolwarm", title="FICO Score Distribution Over Time")
plt.ylabel("Number of Loans")
plt.xticks(rotation=45)
plt.grid()
plt.show()

plt.figure(figsize=(12, 6))
vantage_distribution.plot(kind="line", marker="o", colormap="coolwarm", title="Vantage Score Distribution Over Time")
plt.ylabel("Number of Loans")
plt.xticks(rotation=45)
plt.grid()
plt.show()

### **6Ô∏è‚É£ PSI (Population Stability Index) for Score Buckets**
def compute_psi(base, current, bins=10):
    """Computes Population Stability Index (PSI) for score distributions."""
    base_dist = base.value_counts(normalize=True, bins=bins).sort_index()
    current_dist = current.value_counts(normalize=True, bins=bins).sort_index()

    psi_values = (current_dist - base_dist) * np.log(current_dist / base_dist)
    return psi_values.sum()

base_period = df[df["Vintage"] < "2023-06"]["FICO"]
current_period = df[df["Vintage"] >= "2023-06"]["FICO"]

psi_fico = compute_psi(base_period, current_period)

### **7Ô∏è‚É£ Logistic Regression Monotonicity Test**
X_fico, X_vantage, y = df[["FICO"]], df[["Vantage"]], df["Default"]

logit_fico = LogisticRegression().fit(X_fico, y)
logit_vantage = LogisticRegression().fit(X_vantage, y)

auc_fico = roc_auc_score(y, logit_fico.predict_proba(X_fico)[:, 1])
auc_vantage = roc_auc_score(y, logit_vantage.predict_proba(X_vantage)[:, 1])

### **üöÄ Summary of Results**
print(f"AUC-ROC (FICO): {auc_roc_fico:.3f}, AUC-ROC (Vantage): {auc_roc_vantage:.3f}")
print(f"Gini Coefficient (FICO): {gini_fico:.3f}, Gini Coefficient (Vantage): {gini_vantage:.3f}")
print(f"KS Score (FICO): {ks_fico:.3f}, KS Score (Vantage): {ks_vantage:.3f}")
print(f"PSI Score (FICO vs. Vantage): {psi_fico:.3f}")
print(f"Logistic Regression AUC (FICO): {auc_fico:.3f}, AUC (Vantage): {auc_vantage:.3f}")
