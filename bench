import numpy as np
from sklearn.cluster import KMeans, DBSCAN
from sklearn.mixture import GaussianMixture
from sklearn.metrics import silhouette_score
from skopt import BayesSearchCV
from skopt.space import Integer, Real

# Sample data
np.random.seed(0)
X = np.random.rand(500, 10)  # Replace with your dataset

# Define scoring function for Silhouette Score
def silhouette_scorer(estimator, X):
    labels = estimator.fit_predict(X)
    if len(set(labels)) > 1:  # Silhouette requires at least 2 clusters
        return silhouette_score(X, labels)
    else:
        return -1  # Invalid score for single cluster

# 1. K-Means Optimization
kmeans_search = BayesSearchCV(
    KMeans(),
    {"n_clusters": Integer(2, 10)},
    n_iter=10,
    scoring=silhouette_scorer,
    cv=[(slice(None), slice(None))],
    n_jobs=-1,
    random_state=0
)
kmeans_search.fit(X)
best_kmeans = kmeans_search.best_estimator_
kmeans_labels = best_kmeans.fit_predict(X)

# 2. DBSCAN Optimization
dbscan_search = BayesSearchCV(
    DBSCAN(),
    {
        "eps": Real(0.1, 1.0, prior="log-uniform"),
        "min_samples": Integer(2, 10)
    },
    n_iter=10,
    scoring=silhouette_scorer,
    cv=[(slice(None), slice(None))],
    n_jobs=-1,
    random_state=0
)
dbscan_search.fit(X)
best_dbscan = dbscan_search.best_estimator_
dbscan_labels = best_dbscan.fit_predict(X)

# 3. GMM Optimization
gmm_search = BayesSearchCV(
    GaussianMixture(),
    {"n_components": Integer(2, 10)},
    n_iter=10,
    scoring=silhouette_scorer,
    cv=[(slice(None), slice(None))],
    n_jobs=-1,
    random_state=0
)
gmm_search.fit(X)
best_gmm = gmm_search.best_estimator_
gmm_labels = best_gmm.fit_predict(X)

# Evaluate the Best Models
def evaluate_clustering(labels, X):
    unique_labels = len(np.unique(labels))
    ss = silhouette_score(X, labels) if unique_labels > 1 else np.nan
    return {
        "Silhouette Score": ss,
        "Number of Clusters": unique_labels,
        "Cluster Sizes": np.bincount(labels[labels >= 0])  # Ignoring noise if any
    }

# Collect results
kmeans_results = evaluate_clustering(kmeans_labels, X)
dbscan_results = evaluate_clustering(dbscan_labels, X)
gmm_results = evaluate_clustering(gmm_labels, X)

# Display results
import pandas as pd
results_df = pd.DataFrame({
    "Metric": ["Silhouette Score", "Number of Clusters", "Cluster Sizes"],
    "K-Means": [kmeans_results["Silhouette Score"], kmeans_results["Number of Clusters"], kmeans_results["Cluster Sizes"]],
    "DBSCAN": [dbscan_results["Silhouette Score"], dbscan_results["Number of Clusters"], dbscan_results["Cluster Sizes"]],
    "GMM": [gmm_results["Silhouette Score"], gmm_results["Number of Clusters"], gmm_results["Cluster Sizes"]],
})

print("Comparison of Clustering Results:")
print(results_df)
