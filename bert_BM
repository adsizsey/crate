import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score, precision_score, recall_score
from transformers import BertTokenizer, BertForSequenceClassification
from torch.utils.data import DataLoader, Dataset
import torch
import re

# Load datasets
datasets = {
    "Lex": pd.read_csv("lex_results.csv"),
    "Informal": pd.read_csv("informal_results.csv"),
    "Broken": pd.read_csv("broken_results.csv"),
    "Contextual": pd.read_csv("contextual_results.csv"),
    "Passive": pd.read_csv("passive_results.csv"),
    "Synonym": pd.read_csv("synonym_results.csv"),
}

# Text cleaning function
def clean_text(text):
    text = re.sub(r"[^a-zA-Z\s]", "", text)  # Keep only letters and spaces
    text = re.sub(r"\s+", " ", text)         # Remove extra spaces
    return text.strip().lower()

# Apply text cleaning
for name, df in datasets.items():
    df['Utterance'] = df['Utterance'].apply(clean_text)

# Split Lex dataset into train/test sets
lex_data = datasets["Lex"]
train_data, lex_test_data = train_test_split(
    lex_data, test_size=0.3, stratify=lex_data['ExpectedIntent'], random_state=42
)

# Helper function for evaluation
def evaluate_model(y_true, y_pred, model_name, dataset_name):
    return {
        "Model": model_name,
        "Dataset": dataset_name,
        "Accuracy": accuracy_score(y_true, y_pred),
        "Precision": precision_score(y_true, y_pred, average='weighted', zero_division=0),
        "Recall": recall_score(y_true, y_pred, average='weighted', zero_division=0),
    }

# Initialize results list
results = []

# ------------------------------------
# Baseline Model (Logistic Regression)
# ------------------------------------
vectorizer = TfidfVectorizer(lowercase=True, stop_words='english', max_features=5000)
X_train = vectorizer.fit_transform(train_data['Utterance'])
y_train = train_data['ExpectedIntent']

baseline_model = LogisticRegression(max_iter=1000, random_state=42)
baseline_model.fit(X_train, y_train)

# Evaluate on all datasets
for name, df in datasets.items():
    X_test = vectorizer.transform(df['Utterance'])
    y_test = df['ExpectedIntent']
    y_pred = baseline_model.predict(X_test)
    results.append(evaluate_model(y_test, y_pred, "Baseline", name))

# -----------------
# Benchmark Model (SVM)
# -----------------
svm_model = LinearSVC(random_state=42, max_iter=5000)
svm_model.fit(X_train, y_train)

# Evaluate on all datasets
for name, df in datasets.items():
    X_test = vectorizer.transform(df['Utterance'])
    y_test = df['ExpectedIntent']
    y_pred = svm_model.predict(X_test)
    results.append(evaluate_model(y_test, y_pred, "SVM", name))

# --------------------
# Deep Learning Model (BERT)
# --------------------
class TextDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_len):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, index):
        text = self.texts[index]
        label = self.labels[index]
        encoding = self.tokenizer.encode_plus(
            text,
            max_length=self.max_len,
            add_special_tokens=True,
            truncation=True,
            padding='max_length',
            return_attention_mask=True,
            return_tensors='pt'
        )
        return {
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'label': torch.tensor(label, dtype=torch.long)
        }

# Prepare BERT
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
label_encoder = {label: idx for idx, label in enumerate(train_data['ExpectedIntent'].unique())}
label_decoder = {v: k for k, v in label_encoder.items()}

train_dataset = TextDataset(
    train_data['Utterance'].tolist(),
    train_data['ExpectedIntent'].map(label_encoder).tolist(),
    tokenizer, max_len=128
)
train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)

bert_model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=len(label_encoder))
bert_model = bert_model.to('cuda' if torch.cuda.is_available() else 'cpu')
optimizer = torch.optim.AdamW(bert_model.parameters(), lr=2e-5)

# Train BERT
epochs = 3
bert_model.train()
for epoch in range(epochs):
    for batch in train_loader:
        input_ids = batch['input_ids'].to('cuda')
        attention_mask = batch['attention_mask'].to('cuda')
        labels = batch['label'].to('cuda')
        optimizer.zero_grad()
        outputs = bert_model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        loss.backward()
        optimizer.step()

# Evaluate BERT
bert_model.eval()
for name, df in datasets.items():
    test_dataset = TextDataset(
        df['Utterance'].tolist(),
        df['ExpectedIntent'].map(label_encoder).tolist(),
        tokenizer, max_len=128
    )
    test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)

    y_pred = []
    y_true = []
    with torch.no_grad():
        for batch in test_loader:
            input_ids = batch['input_ids'].to('cuda')
            attention_mask = batch['attention_mask'].to('cuda')
            labels = batch['label'].to('cuda')
            outputs = bert_model(input_ids, attention_mask=attention_mask)
            preds = torch.argmax(outputs.logits, axis=1)
            y_pred.extend(preds.cpu().numpy())
            y_true.extend(labels.cpu().numpy())

    y_pred = [label_decoder[pred] for pred in y_pred]
    y_true = [label_decoder[true] for true in y_true]
    results.append(evaluate_model(y_true, y_pred, "BERT", name))

# -----------------
# Create Summary Table
# -----------------
results_df = pd.DataFrame(results)
print(results_df)
