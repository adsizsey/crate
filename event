import pandas as pd
import numpy as np
from sklearn.metrics import roc_auc_score

# ✅ **Step 1: Compute Original AUC Using Negative Vantage3 Scores**
original_auc = roc_auc_score(df["Default"], -df["Vantage"])  # Flip scores
print(f"✅ Original AUC (Before Flipping): {original_auc:.3f}")

# ✅ **Step 2: Define Sampling Strategies (Fixed 3% Sample Size)**
sample_size = int(len(df) * 0.03)  # 3% of the full dataset

# Define different sampling groups
non_defaulters = df[df["Default"] == 0]  # Only selecting from non-defaulters
random_sample = non_defaulters.sample(n=sample_size, random_state=42)
lowest_50_sample = non_defaulters.nsmallest(int(len(non_defaulters) * 0.50), "Vantage").sample(n=sample_size, random_state=42)
lowest_20_sample = non_defaulters.nsmallest(int(len(non_defaulters) * 0.20), "Vantage").sample(n=sample_size, random_state=42)
lowest_10_sample = non_defaulters.nsmallest(int(len(non_defaulters) * 0.10), "Vantage").sample(n=sample_size, random_state=42)

# ✅ **Step 3: Define Scenarios**
sampling_strategies = {
    "Random (3%)": random_sample,
    "Lowest 50% (3%)": lowest_50_sample,
    "Lowest 20% (3%)": lowest_20_sample,
    "Lowest 10% (3%)": lowest_10_sample
}

results = []

# ✅ **Step 4: Loop Through Strategies and Compute AUC**
for strategy, sampled_df in sampling_strategies.items():
    df_flipped = df.copy()
    df_flipped.loc[sampled_df.index, "Default"] = 1  # Convert selected non-defaulters to defaulters

    flipped_auc = roc_auc_score(df_flipped["Default"], -df_flipped["Vantage"])  # Use negative Vantage3
    auc_change = original_auc - flipped_auc

    print(f"⚠️ AUC After Flipping ({strategy}): {flipped_auc:.3f}")
    print(f"⚠️ AUC Change ({strategy}): {auc_change:.3f}")

    results.append({"Sampling Strategy": strategy, "AUC After Flipping": flipped_auc, "AUC Change": auc_change})

# ✅ **Step 5: Store Results in Table**
import ace_tools as tools  

results_df = pd.DataFrame(results)
tools.display_dataframe_to_user(name="AUC Sensitivity Test (Corrected for Score Direction)", dataframe=results_df)
