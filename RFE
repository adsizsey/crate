import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score, davies_bouldin_score
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import StandardScaler

# Generate or load your dataset
np.random.seed(0)
X = pd.DataFrame(np.random.rand(100, 46), columns=[f"feature_{i}" for i in range(46)])

# Scale the dataset
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Autoencoder architecture
input_dim = X_scaled.shape[1]
encoding_dim = 10  # Dimensionality of latent space

# Define the encoder
input_layer = Input(shape=(input_dim,))
encoder = Dense(32, activation="relu")(input_layer)
encoder = Dense(encoding_dim, activation="relu")(encoder)

# Define the decoder
decoder = Dense(32, activation="relu")(encoder)
decoder = Dense(input_dim, activation="linear")(decoder)

# Compile the autoencoder model
autoencoder = Model(inputs=input_layer, outputs=decoder)
autoencoder.compile(optimizer=Adam(), loss='mse')

# Train the autoencoder
autoencoder.fit(X_scaled, X_scaled, epochs=50, batch_size=10, verbose=1)

# Extract latent features
encoder_model = Model(inputs=input_layer, outputs=encoder)
X_latent = encoder_model.predict(X_scaled)

# Perform clustering on the latent space
kmeans = KMeans(n_clusters=3, random_state=0)
labels = kmeans.fit_predict(X_latent)

# Evaluate clustering performance
silhouette = silhouette_score(X_latent, labels)
davies_bouldin = davies_bouldin_score(X_latent, labels)

# Print the clustering metrics
print(f"Silhouette Score: {silhouette}")
print(f"Davies-Bouldin Index: {davies_bouldin}")

# Optional: Visualize latent features
plt.scatter(X_latent[:, 0], X_latent[:, 1], c=labels, cmap='viridis')
plt.title("Clustering on Latent Features from Autoencoder")
plt.xlabel("Latent Feature 1")
plt.ylabel("Latent Feature 2")
plt.colorbar(label='Cluster Label')
plt.show()
