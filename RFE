import pandas as pd
import numpy as np
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import StandardScaler

# Generate or load your dataset
np.random.seed(0)
X = pd.DataFrame(np.random.rand(100, 46), columns=[f"feature_{i}" for i in range(46)])

# Scale the dataset
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Autoencoder architecture
input_dim = X_scaled.shape[1]
encoding_dim = 10  # Dimensionality of latent space

# Define the encoder
input_layer = Input(shape=(input_dim,))
encoder = Dense(32, activation="relu")(input_layer)
encoder_output = Dense(encoding_dim, activation="relu")(encoder)

# Define the decoder
decoder = Dense(32, activation="relu")(encoder_output)
decoder = Dense(input_dim, activation="linear")(decoder)

# Compile the autoencoder model
autoencoder = Model(inputs=input_layer, outputs=decoder)
autoencoder.compile(optimizer=Adam(), loss='mse')

# Train the autoencoder
autoencoder.fit(X_scaled, X_scaled, epochs=50, batch_size=10, verbose=1)

# Extract weights from the encoder layer
encoder_model = Model(inputs=input_layer, outputs=encoder_output)
encoder_weights = encoder_model.layers[1].get_weights()[0]  # Get weights of first encoder layer

# Find top contributing features for each latent dimension
n_top_features = 5  # Number of top features to select per latent dimension
selected_features = set()

for latent_idx in range(encoding_dim):
    # Get absolute weights for the current latent feature
    feature_weights = np.abs(encoder_weights[:, latent_idx])
    # Get indices of top features based on weight magnitude
    top_feature_indices = np.argsort(feature_weights)[-n_top_features:]
    # Add feature names to the selected set
    selected_features.update(X.columns[top_feature_indices])

# Convert selected features to a sorted list
selected_features = sorted(selected_features)
print("Selected Features:", selected_features)
