import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt

# Example dataset
# X = your data

# Parameters
n_clusters = 3  # Set optimal number of clusters
initial_feature_count = X.shape[1]
silhouette_scores = []
feature_counts = []

# Start with all features
remaining_features = list(range(initial_feature_count))
best_score = -1  # Initialize best score

# Iterate to reduce features one by one
while len(remaining_features) > 1:
    current_scores = []
    
    # Evaluate removing each feature
    for feature in remaining_features:
        # Temporary subset excluding one feature
        selected_features = [f for f in remaining_features if f != feature]
        X_temp = X[:, selected_features]
        
        # Perform clustering
        kmeans = KMeans(n_clusters=n_clusters, random_state=42).fit(X_temp)
        score = silhouette_score(X_temp, kmeans.labels_)
        current_scores.append((score, feature))
    
    # Find the best feature to remove
    current_scores.sort(reverse=True)  # Sort by silhouette score descending
    best_score, feature_to_remove = current_scores.pop()  # Feature with lowest impact on score
    
    # Remove the least important feature
    remaining_features.remove(feature_to_remove)
    
    # Save the score and feature count for plotting
    silhouette_scores.append(best_score)
    feature_counts.append(len(remaining_features))

# Plotting Number of Features vs Silhouette Score
plt.figure(figsize=(10, 6))
plt.plot(feature_counts, silhouette_scores, marker='o')
plt.xlabel("Number of Features Selected")
plt.ylabel("Silhouette Score")
plt.title("Wrapper Approach: Number of Features vs Silhouette Score")
plt.grid(True)
plt.show()
