import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import linkage, fcluster, dendrogram
from scipy.spatial.distance import squareform

# Generate or load your dataset
np.random.seed(0)
X = pd.DataFrame(np.random.rand(100, 46), columns=[f"feature_{i}" for i in range(46)])

# Compute the correlation matrix and convert to distance
corr_matrix = X.corr().abs()
distance_matrix = 1 - corr_matrix

# Perform hierarchical clustering based on the distance matrix
linked = linkage(squareform(distance_matrix), method='average')

# Plot the dendrogram
plt.figure(figsize=(10, 6))
dendrogram(linked, labels=X.columns, leaf_rotation=90)
plt.title("Dendrogram of Feature Clustering")
plt.xlabel("Features")
plt.ylabel("Distance (1 - Correlation)")
plt.show()

# Track feature counts at various thresholds
thresholds = np.linspace(0.6, 0.95, 8)  # Example thresholds for correlation
feature_counts = []

for threshold in thresholds:
    clusters = fcluster(linked, threshold, criterion='distance')
    selected_features = []
    for cluster_id in np.unique(clusters):
        cluster_features = X.columns[clusters == cluster_id]
        selected_features.append(cluster_features[0])  # Pick one feature per cluster
    feature_counts.append(len(selected_features))

# Plot the number of features retained at each threshold level
plt.figure(figsize=(8, 5))
plt.plot(thresholds, feature_counts, marker='o')
plt.title("Number of Features Retained at Different Correlation Thresholds")
plt.xlabel("Correlation Threshold")
plt.ylabel("Number of Features Retained")
plt.grid(True)
plt.show()
